### worling with files in linux ###

## cat (Concatenate & View Files)

Used to view the contents of a file quickly.
Can also create, merge, or append files

examples:
cat file.txt              # show contents of file
cat file1.txt file2.txt   # show contents of both files
cat > newfile.txt         # create file and type input (Ctrl+D to save)
cat file1.txt >> file2.txt # append file1 content to file2


## less (View Large Files Page by Page)

Used to view large files one screen at a time.
Faster than cat for big files since it doesn’t load everything into memo

examples:
less /var/log/syslog   # open log file for viewing
Navigation:
Space → Next page
b → Previous page
/word → Search forward for “word”
q → Quit

## nano (Simple File Editor)

A beginner-friendly text editor in Linux.
Easy to use compared to vi or vim.

examples:
nano file.txt   # open file in nano editor
Ctrl + O → Save (Write Out)
Ctrl + X → Exit
Ctrl + K → Cut line
Ctrl + U → Paste line

## vi / vim (Advanced Text Editor)

vi = Visual Editor (default on Linux).
vim = “Vi IMproved” (enhanced with more features like syntax highlighting).
Very powerful but has a steeper learning curve.

Modes in vi/vim:
Command Mode (default): for navigation & commands.
Insert Mode (press i): for editing text.
Last Line Mode (press :): for commands like save, quit.

examples:
vi file.txt   # open file in vi editor

i → Insert mode (start editing)
Esc → Back to command mode
:w → Save (Write)
:q → Quit
:wq → Save & quit
:q! → Quit without saving
/word → Search for “word”


In short:
cat → quick view.
less → scroll/search large files.
nano → simple editing.
vi/vim → powerful editing (default in Linux servers).

## text processing tools:

grep:
Purpose: Search for text patterns in files (or input).
How it works: It matches regular expressions and prints matching lines.
Example: grep "error" log.txt will find all lines in log.txt containing the word "error".

awk:
Purpose: A powerful text processing tool, especially useful for column-based data.
How it works: It processes text line by line and can split input into fields (based on a delimiter).
Example: awk '{print $1}' file.txt prints the first column of each line in file.txt.

sed:
Purpose: Stream editor for performing basic text transformations.
How it works: It reads input line by line, applies transformations (like substitution or deletion), and outputs the result.
Example: sed 's/old/new/g' file.txt replaces all occurrences of "old" with "new" in file.txt.

find:
Purpose: Search for files and directories in a file system based on criteria.
How it works: It searches directory hierarchies and can filter by name, size, time, type, etc.
Example: find /home/user -name "*.txt" finds all .txt files in the /home/user directory.

## In Linux, file permissions control who can read, write, or execute a file. They are divided into three categories: User (Owner), Group, and Others.

Here’s a breakdown:

1. Permission Types
Read (r): Allows reading the contents of the file.
Write (w): Allows modifying or deleting the file.
Execute (x): Allows running the file as a program or script.

2. User, Group, and Others
User (Owner): The file’s creator or the owner of the file.
Group: A group of users who are assigned the same permissions for a file.
Others: Everyone else who isn’t the owner or part of the group.

3. Displaying Permissions
The ls -l command shows file permissions in the following format:
-rwxr-xr--
The first character indicates the file type (- for regular files, d for directories, etc.).
The next three characters are the permissions for the owner (rwx = read, write, execute).
The next three characters are for the group.
The last three characters are for others.

4. Changing Permissions
You can change file permissions using the chmod command:
Numeric method: Each permission is represented by a number:
r = 4, w = 2, x = 1
Example: chmod 755 file.txt means:
Owner: rwx (7)
Group: rx (5)
Others: rx (5)
Symbolic method: You can also specify permissions symbolically:
Example: chmod u+x file.txt adds execute permission for the owner.

5. Changing Ownership
Owner: chown user file.txt changes the owner of a file.
Group: chown :group file.txt changes the group of a file.
